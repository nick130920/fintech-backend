---
description: Reglas de dise√±o y desarrollo para Money Flow Flutter App
globs:
alwaysApply: true
---

# Money Flow - Reglas de Desarrollo Flutter

## üö´ REGLAS ESTRICTAS - PROHIBIDO

### ‚ùå COLORES HARDCODEADOS
```dart
// ‚ùå NUNCA HACER ESTO
color: Colors.red
color: Color(0xFF123456)
backgroundColor: Colors.grey[50]
Colors.blue[600]

// ‚úÖ SIEMPRE HACER ESTO
color: Theme.of(context).colorScheme.error
color: Theme.of(context).colorScheme.primary
backgroundColor: Theme.of(context).colorScheme.surface
```

### ‚ùå WIDGETS SIN CONTEXTO DE TEMA
```dart
// ‚ùå NUNCA HACER ESTO
const Text('T√≠tulo', style: TextStyle(color: Colors.black))
Container(color: Colors.white)

// ‚úÖ SIEMPRE HACER ESTO
Text('T√≠tulo', style: TextStyle(color: Theme.of(context).colorScheme.onSurface))
Container(color: Theme.of(context).colorScheme.surfaceContainerHighest)
```

### ‚ùå ESPACIADO INCONSISTENTE
```dart
// ‚ùå NUNCA HACER ESTO
const SizedBox(height: 15)
const EdgeInsets.all(13)
const EdgeInsets.only(top: 18, left: 22)

// ‚úÖ SIEMPRE HACER ESTO
const SizedBox(height: 16)  // 8, 16, 24, 32
const EdgeInsets.all(16)    // 8, 16, 24
```

---

## ‚úÖ OBLIGATORIO - SIEMPRE USAR

### üì± Estructura de Pantalla Est√°ndar
```dart
Scaffold(
  backgroundColor: Theme.of(context).colorScheme.surface,
  appBar: AppBar(
    title: const Text('T√≠tulo'),
    backgroundColor: Colors.transparent,
    elevation: 0,
    actions: [
      TextButton(
        onPressed: onSave,
        child: const Text(
          'Guardar',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    ],
  ),
  body: SingleChildScrollView(
    padding: const EdgeInsets.all(24),
    child: Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildHeader(),
          const SizedBox(height: 32),
          // Contenido...
        ],
      ),
    ),
  ),
)
```

### üé® Sistema de Colores
```dart
// Colores principales
Theme.of(context).colorScheme.primary          // AppColors.primary
Theme.of(context).colorScheme.onPrimary        // AppColors.white
Theme.of(context).colorScheme.primaryContainer // Para badges/chips

// Colores de superficie
Theme.of(context).colorScheme.surface                    // Fondo principal
Theme.of(context).colorScheme.surfaceContainerHighest   // Cards/inputs
Theme.of(context).colorScheme.surfaceContainerHigh      // Contenedores
Theme.of(context).colorScheme.surfaceContainerLow       // Secciones

// Colores de texto
Theme.of(context).colorScheme.onSurface                        // Texto principal
Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.8) // Texto secundario
Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6) // Texto terciario
Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.4) // Placeholders

// Colores sem√°nticos
Theme.of(context).colorScheme.error           // Errores
Theme.of(context).colorScheme.errorContainer  // Fondo error
Theme.of(context).colorScheme.outline         // Bordes
```

### üìè Espaciado Est√°ndar
```dart
// Espaciado vertical
const SizedBox(height: 8)     // Peque√±o
const SizedBox(height: 16)    // Mediano
const SizedBox(height: 24)    // Grande
const SizedBox(height: 32)    // Extra grande

// Padding de contenedores
const EdgeInsets.all(8)       // Peque√±o
const EdgeInsets.all(16)      // Est√°ndar
const EdgeInsets.all(24)      // Screen padding

// Border radius
BorderRadius.circular(8)      // Peque√±o
BorderRadius.circular(12)     // Est√°ndar
BorderRadius.circular(16)     // Grande
BorderRadius.circular(20)     // Modal tops
```

---

## üß© COMPONENTES OBLIGATORIOS

### 1. Header con √çcono
```dart
Widget _buildHeader() {
  return Row(
    children: [
      Container(
        width: 48,
        height: 48,
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.primaryContainer, // Para ingresos
          // color: Theme.of(context).colorScheme.errorContainer, // Para gastos
          borderRadius: BorderRadius.circular(12),
        ),
        child: Icon(
          Icons.trending_up, // trending_up para ingresos, receipt para gastos
          color: Theme.of(context).colorScheme.onPrimaryContainer,
          size: 24,
        ),
      ),
      const SizedBox(width: 16),
      Expanded(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'T√≠tulo Principal',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).colorScheme.onSurface,
              ),
            ),
            Text(
              'Subt√≠tulo descriptivo',
              style: TextStyle(
                fontSize: 14,
                color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6),
              ),
            ),
          ],
        ),
      ),
    ],
  );
}
```

### 2. Campo de Formulario Est√°ndar
```dart
Widget _buildFormField(String label, String hint, TextEditingController controller) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        label,
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w600,
          color: Theme.of(context).colorScheme.onSurface,
        ),
      ),
      const SizedBox(height: 8),
      TextFormField(
        controller: controller,
        decoration: InputDecoration(
          hintText: hint,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Theme.of(context).colorScheme.outline),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Theme.of(context).colorScheme.outline),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Theme.of(context).colorScheme.primary, width: 2),
          ),
          fillColor: Theme.of(context).colorScheme.surfaceContainerHighest,
          filled: true,
        ),
      ),
    ],
  );
}
```

### 3. Campo de Monto
```dart
Widget _buildAmountField() {
  return Consumer<CurrencyProvider>(
    builder: (context, currencyProvider, child) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Monto',
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
              color: Theme.of(context).colorScheme.onSurface,
            ),
          ),
          const SizedBox(height: 8),
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surfaceContainerHighest,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Theme.of(context).colorScheme.outline),
            ),
            child: Row(
              children: [
                Text(
                  currencyProvider.currencySymbol,
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: TextFormField(
                    controller: _amountController,
                    keyboardType: const TextInputType.numberWithOptions(decimal: true),
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                    decoration: InputDecoration(
                      hintText: '0.00',
                      border: InputBorder.none,
                      hintStyle: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.4),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      );
    },
  );
}
```

### 4. Selector con Modal
```dart
Widget _buildSelector(String label, String? selectedValue, String hint, VoidCallback onTap) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        label,
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w600,
          color: Theme.of(context).colorScheme.onSurface,
        ),
      ),
      const SizedBox(height: 8),
      InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surfaceContainerHighest,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Theme.of(context).colorScheme.outline),
          ),
          child: Row(
            children: [
              if (selectedValue != null) ...[
                // Mostrar valor seleccionado
                Expanded(
                  child: Text(
                    selectedValue,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Theme.of(context).colorScheme.onSurface,
                    ),
                  ),
                ),
              ] else ...[
                Icon(Icons.category, color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6)),
                const SizedBox(width: 12),
                Expanded(
                  child: Text(
                    hint,
                    style: TextStyle(
                      fontSize: 16,
                      color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6),
                    ),
                  ),
                ),
              ],
              Icon(Icons.keyboard_arrow_down, color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.6)),
            ],
          ),
        ),
      ),
    ],
  );
}
```

### 5. Bot√≥n Principal
```dart
Widget _buildPrimaryButton(String text, VoidCallback? onPressed, {bool isLoading = false}) {
  return SizedBox(
    width: double.infinity,
    child: ElevatedButton(
      onPressed: isLoading ? null : onPressed,
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
      child: isLoading
          ? const SizedBox(
              height: 20,
              width: 20,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            )
          : Text(
              text,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
    ),
  );
}
```

### 6. Modal Bottom Sheet
```dart
void _showBottomSheetModal(BuildContext context, String title, Widget content) {
  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    backgroundColor: Colors.transparent,
    builder: (context) => Container(
      height: MediaQuery.of(context).size.height * 0.6,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        children: [
          Container(
            width: 40,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 12),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.onSurface.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(20),
            child: Text(
              title,
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Theme.of(context).colorScheme.onSurface,
              ),
            ),
          ),
          Expanded(child: content),
        ],
      ),
    ),
  );
}
```

### 7. Campos Opcionales (ExpansionTile)
```dart
Widget _buildOptionalFields() {
  return ExpansionTile(
    title: Text(
      'Informaci√≥n adicional (opcional)',
      style: TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.w600,
        color: Theme.of(context).colorScheme.onSurface,
      ),
    ),
    children: [
      const SizedBox(height: 16),
      // Campos opcionales aqu√≠
      const SizedBox(height: 16),
    ],
  );
}
```

---

## üéØ MANEJO DE ESTADOS

### Loading States
```dart
// En botones
child: isLoading
    ? const SizedBox(
        height: 20,
        width: 20,
        child: CircularProgressIndicator(strokeWidth: 2),
      )
    : Text('Texto del bot√≥n')

// En pantallas
if (provider.isLoading) {
  return const Center(child: CircularProgressIndicator());
}
```

### Error States
```dart
if (provider.error != null) {
  WidgetsBinding.instance.addPostFrameCallback((_) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(provider.error!),
        backgroundColor: Theme.of(context).colorScheme.error,
      ),
    );
  });
}
```

### Consumer Pattern
```dart
// ‚úÖ SIEMPRE usar Consumer para providers
Consumer<ExpenseProvider>(
  builder: (context, provider, child) {
    // UI que depende del provider
  },
)

// ‚ùå NUNCA hacer context.watch() directo en build
```

---

## üìÅ ARQUITECTURA DE ARCHIVOS

### Estructura Obligatoria
```
lib/
‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îú‚îÄ‚îÄ app/              # Configuraci√≥n de app
‚îÇ   ‚îú‚îÄ‚îÄ providers/        # Providers globales
‚îÇ   ‚îú‚îÄ‚îÄ services/         # Servicios
‚îÇ   ‚îî‚îÄ‚îÄ theme/           # Sistema de temas
‚îú‚îÄ‚îÄ features/
‚îÇ   ‚îî‚îÄ‚îÄ feature_name/
‚îÇ       ‚îú‚îÄ‚îÄ data/        # Models, repositories
‚îÇ       ‚îî‚îÄ‚îÄ presentation/ # Screens, providers, widgets
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ screens/         # Pantallas compartidas
‚îÇ   ‚îî‚îÄ‚îÄ widgets/         # Widgets reutilizables
‚îî‚îÄ‚îÄ main.dart
```

### Nombres de Archivos
```dart
// ‚úÖ CORRECTO: snake_case
add_expense_screen.dart
expense_provider.dart
category_model.dart

// ‚ùå INCORRECTO: PascalCase o camelCase
AddExpenseScreen.dart
expenseProvider.dart
```

---

## üîß VALIDACIONES Y TESTING

### Validaci√≥n de Formularios
```dart
// ‚úÖ SIEMPRE validar antes de submit
if (!_formKey.currentState!.validate()) {
  return;
}

if (_selectedCategory == null) {
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(
      content: Text('Selecciona una categor√≠a'),
      backgroundColor: Colors.orange,
    ),
  );
  return;
}
```

### Mounted Check
```dart
// ‚úÖ SIEMPRE verificar mounted en async operations
if (success && mounted) {
  Navigator.of(context).pop();
}

// ‚úÖ En setState despu√©s de async
if (!mounted) return;
setState(() {
  // update state
});
```

---

## üìã CHECKLIST PRE-COMMIT

- [ ] No hay colores hardcodeados
- [ ] Se usa `Theme.of(context)` para todos los colores
- [ ] Los espaciados siguen el est√°ndar (8, 16, 24, 32)
- [ ] Los border radius son consistentes (8, 12, 16, 20)
- [ ] Los componentes siguen los patrones establecidos
- [ ] Hay validaci√≥n de estados de loading/error
- [ ] Se verifica `mounted` en operaciones async
- [ ] Los formularios tienen validaci√≥n apropiada
- [ ] Se usan Consumer para providers
- [ ] Los nombres de archivos est√°n en snake_case
- [ ] La estructura de directorios es correcta
- [ ] Se usan componentes Glassmorphism en lugar de BackdropFilter manual
- [ ] Las animaciones de entrada est√°n habilitadas en componentes importantes
- [ ] Los efectos hover est√°n configurados apropiadamente

## üöÄ COMANDOS DE VERIFICACI√ìN

```bash
# Buscar colores hardcodeados
grep -r "Colors\." lib/ --exclude-dir=build
grep -r "Color(0x" lib/ --exclude-dir=build

# Verificar imports del tema
grep -r "app_theme.dart" lib/

# Verificar que no hay const en widgets que usan Theme.of(context)
grep -r "const.*Theme.of(context)" lib/

# Verificar uso correcto de componentes Glassmorphism
grep -r "BackdropFilter" lib/ --exclude-dir=shared/widgets
grep -r "ImageFilter.blur" lib/ --exclude-dir=shared/widgets

# Verificar imports de glassmorphism widgets
grep -r "glassmorphism_widgets.dart" lib/
```

---

## üåü SISTEMA GLASSMORPHISM - COMPONENTES AVANZADOS

### üìã COMPONENTES DISPONIBLES

#### 1. **GlassmorphismCard** - Cards con efectos glass
```dart
import 'package:money_flow/shared/widgets/glassmorphism_widgets.dart';

// ‚úÖ USAR PARA: Cards principales, contenedores importantes
GlassmorphismCard(
  style: GlassStyles.dynamic,        // light, medium, heavy, dynamic
  enableHoverEffect: true,           // Efectos hover sofisticados
  enableEntryAnimation: true,        // Animaciones de entrada
  animationDuration: Duration(milliseconds: 800),
  child: YourContent(),
)
```

#### 2. **GlassmorphismButton** - Botones con efectos avanzados
```dart
// ‚úÖ USAR PARA: Botones principales, CTAs, acciones importantes
GlassmorphismButton(
  style: GlassButtonStyles.primary,  // primary, secondary, outline, floating
  enablePulseEffect: true,           // Pulsaci√≥n continua
  enableRippleEffect: true,          // Ondas al tocar
  onPressed: () => doSomething(),
  child: Text('Action'),
)
```

#### 3. **GlassmorphismListItem** - Items de lista animados
```dart
// ‚úÖ USAR PARA: Listas de transacciones, elementos importantes
GlassmorphismListItem(
  enableSlideAnimation: true,        // Entrada desde la derecha
  enableHoverEffect: true,           // Hover effects
  index: index,                      // Para animaciones secuenciales
  leading: Icon(Icons.payment),
  title: Text('Transaction'),
  subtitle: Text('Category'),
  trailing: Text('-\$50.00'),
  onTap: () => navigate(),
)
```

### üé® ESTILOS DISPONIBLES

#### **Card Styles:**
```dart
GlassStyles.light    // Sutil, para elementos secundarios
GlassStyles.medium   // Est√°ndar, para la mayor√≠a de cards
GlassStyles.heavy    // Intenso, para elementos destacados
GlassStyles.dynamic  // Blur variable, para cards principales
```

#### **Button Styles:**
```dart
GlassButtonStyles.primary   // Bot√≥n principal con color theme
GlassButtonStyles.secondary // Bot√≥n secundario transl√∫cido
GlassButtonStyles.outline   // Bot√≥n con borde, fondo transparente
GlassButtonStyles.floating  // Bot√≥n flotante con sombra intensa
```

### ‚ú® CARACTER√çSTICAS AUTOM√ÅTICAS

#### **Animaciones de Entrada:**
- **Elastic scale**: Entrada suave con rebote
- **Fade in**: Aparici√≥n gradual con opacidad
- **Retrasos aleatorios**: Para efecto natural escalonado
- **Slide animations**: Para listas (derecha ‚Üí izquierda)

#### **Efectos Hover:**
- **Scale sutil**: Crecimiento 1.01x - 1.02x
- **Blur din√°mico**: Intensificaci√≥n del efecto glass
- **Glow effect**: Resplandor con color theme
- **Border enhancement**: Bordes m√°s brillantes

#### **Blur Din√°mico:**
- **Variaci√≥n continua**: Blur que cambia constantemente
- **Intensidad adaptativa**: M√°s intenso en hover
- **Performance optimizado**: GPU-accelerated effects

### üö´ REGLAS GLASSMORPHISM

#### ‚ùå **NO HACER:**
```dart
// ‚ùå BackdropFilter manual (usar componentes)
ClipRRect(
  child: BackdropFilter(
    filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
    child: Container(...),
  ),
)

// ‚ùå Hardcodear valores de blur
BackdropFilter(filter: ImageFilter.blur(sigmaX: 15, sigmaY: 15))

// ‚ùå Colores hardcodeados en glass effects
Colors.white.withOpacity(0.1)
```

#### ‚úÖ **SIEMPRE HACER:**
```dart
// ‚úÖ Usar componentes glassmorphism
GlassmorphismCard(
  style: GlassStyles.medium,
  child: YourContent(),
)

// ‚úÖ Aprovechar animaciones autom√°ticas
GlassmorphismButton(
  enablePulseEffect: true,
  enableRippleEffect: true,
  child: Text('Action'),
)

// ‚úÖ Usar estilos predefinidos
GlassmorphismListItem(
  enableSlideAnimation: true,
  index: index, // Para animaciones secuenciales
)
```

### üéØ CASOS DE USO RECOMENDADOS

#### **Dashboard Cards:**
```dart
GlassmorphismCard(
  style: GlassStyles.dynamic,     // Blur variable
  enableHoverEffect: true,
  child: _buildCardContent(),
)
```

#### **Botones de Acci√≥n:**
```dart
GlassmorphismButton(
  style: GlassButtonStyles.floating,
  enablePulseEffect: true,
  onPressed: () => addTransaction(),
)
```

#### **Listas de Transacciones:**
```dart
Column(
  children: transactions.map((transaction) {
    final index = transactions.indexOf(transaction);
    return GlassmorphismListItem(
      index: index,              // Animaciones escalonadas
      enableSlideAnimation: true,
      leading: CategoryIcon(),
      title: Text(transaction.name),
      onTap: () => viewDetails(transaction),
    );
  }).toList(),
)
```

### üì± RESPONSIVE BEHAVIOR

- **Hover effects**: Solo en desktop/web (detecci√≥n autom√°tica)
- **Touch feedback**: Ripple effects en m√≥vil
- **Performance scaling**: Reduce blur en dispositivos de gama baja
- **Adaptive theming**: Colores autom√°ticos seg√∫n modo claro/oscuro

---

## üí° EJEMPLOS R√ÅPIDOS

### ‚úÖ Implementaci√≥n Correcta
```dart
Container(
  padding: const EdgeInsets.all(16),
  decoration: BoxDecoration(
    color: Theme.of(context).colorScheme.surfaceContainerHighest,
    borderRadius: BorderRadius.circular(12),
    border: Border.all(color: Theme.of(context).colorScheme.outline),
  ),
  child: Text(
    'Contenido',
    style: TextStyle(
      fontSize: 16,
      fontWeight: FontWeight.w600,
      color: Theme.of(context).colorScheme.onSurface,
    ),
  ),
)
```

### ‚ùå Implementaci√≥n Incorrecta
```dart
const Container(
  padding: EdgeInsets.all(20),
  decoration: BoxDecoration(
    color: Colors.white,
    borderRadius: BorderRadius.circular(15),
    border: Border.all(color: Colors.grey),
  ),
  child: Text(
    'Contenido',
    style: TextStyle(
      fontSize: 18,
      fontWeight: FontWeight.bold,
      color: Colors.black,
    ),
  ),
)
```

---

**RECORDATORIO**: Estas reglas son OBLIGATORIAS para mantener la consistencia visual y la calidad del c√≥digo en Money Flow. El cumplimiento de estas reglas es esencial para una experiencia de usuario cohesiva y un c√≥digo mantenible.
